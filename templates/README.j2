{# Set Example Module Name to use for module call examples #}
{% if var.Config.Readme.Usage.ResourceName is defined -%}
    {% set ExModuleName = var.Config.Readme.Usage.ResourceName -%}
{% else -%}
    {% set ExModuleName = var.Repo.name|default("example", true) -%}
{% endif %}
{# Set Example Module Namespace to use for module call examples #}
{% if var.Config.Repository.NameSpace is defined -%}
    {% set ExModuleNameSpace = var.Config.Repository.NameSpace -%}
{% else -%}
    {% set ExModuleNameSpace = var.Repo.owner.login|default("Example-GitHub-User", true) -%}
{% endif %}
{# Set Example Module Repo URL to use for module call examples #}
{% if var.Config.Repository.RepoName is defined -%}
    {% set ExModuleRepoURL = "%s/%s"|format(ExModuleNameSpace,var.Config.Repository.RepoName) -%}
{% else -%}
    {% set ExModuleRepoURL = var.Repo.full_name|default("Example-GitHub-User/Example-Terraform-Module", true) -%}
{% endif %}
{# Set Example Module Version to use for module call examples #}
{% if var.Release.tag_name is defined -%}
    {% set ExModuleVersion = var.Release.tag_name -%}
{% else -%}
    {% set ExModuleVersion = var.Config.Repository.Version|default("v1.0.0", true) -%}
{% endif %}
{# START OF README TPL #}
<!-- VSCode Markdown Exclusions-->
<!-- markdownlint-disable MD025 Single Title Headers-->
{# TITLE #}
# {{ var.Config.Readme.Title|default("Terraform Module Documentation", true) }}
{# OPTIONAL HERO IMAGE #}
{% if var.Config.Readme.HeroImage is defined %}

![Hero]({{ var.Config.Readme.HeroImage }})
{% endif %}

<br>

{# VERSION BADGE #}
![Version-Badge](https://img.shields.io/badge/MODULE%20VERSION-{{ ExModuleVersion }}-Green?style=for-the-badge&logo=terraform&logoColor=BLUE&logoWidth=25)

<br><br>

# Table of Contents

* [Getting Started](#getting-started)
* [Module Pre-Requisites and Dependencies](#module-pre-requisites-and-dependencies)
* [Module Directory Structure](#module-directory-structure)
* [Module Usage](#module-usage)
* [Terraform Variable Usage](#terraform-variables-usage)
  * [Inline Variable Declaration](#inline-variable-declaration)
  * [TFVar Variable Declaration](#tfvar-variable-declaration)
* [Required Module Variables](#required-variables)
{% for var in var.TFRequiredVars %}
  * :warning: {{var.Name}}
{% endfor %}
* [Optional Module Variables](#optional-variables)
{% for var in var.TFOptionalVars %}
  * :white_check_mark: {{var.Name}}
{% endfor %}

<br><br>

{# GETTING STARTED #}
# Getting Started

{% if var.Config.Readme.GettingStarted is defined %}
{{ var.Config.Readme.GettingStarted }}
{% else %}
{{ var.Repo.Description|default("No description has been defined for this project.", true) }}
{% endif %}

<br><br>

{# PRE-REQS #}
# Module Pre-Requisites and Dependencies

{{ var.Config.Readme.PreRequisites|default("This module does not currently have any pre-requisites or dependency requirements.", true) }}

<br><br>

{# DIRECTORY STRUCTURE TREE #}
# Module Directory Structure

```bash
{{ var.Tree }}
```

<br><br>

{# MODULE EXAMPLE #}
# Module Usage

```terraform
module "{{ ExModuleName }}" {
    source = "git@github.com:{{ ExModuleRepoURL }}?ref={{ ExModuleVersion }}"

    // Required Variables
    {% for var in var.TFRequiredVars %}
    {% if var.Type != 'map' %}
    {{ var.Name }}{{ "="|indent(var.TFRequiredVars_MaxLength - var.Name|length + 1, True) }} {{ "var.ExampleValue"|e if var.Type == 'String' else var.ExampleValue }}
    {% else %}

    {{ var.Name }} = {
        {% for key, value in var.DefaultValue.items() %}
        {{ key }} = "{{ value }}"
        {% endfor %}
    }
    {% endif %}
    {% endfor %}

    // Optional Variables with module defined default values assigned
    {% for var in var.TFOptionalVars %}
    {% if var.Type != 'map' %}
    # {{ var.Name }}{{ "="|indent(var.TFOptionalVars_MaxLength - var.Name|length + 1, True) }} {{ "var.DefaultValue"|e if var.Type == 'String' else var.DefaultValue }}
    {% else %}

    # {{ var.Name }} = {
        {% for key, value in var.DefaultValue.items() %}
    #   {{ key }} = "{{ value }}"
        {% endfor %}
    # }
    {% endif %}
    {% endfor %}
}
```

<br><br>

{# TERRAFORM VAR EXAMPLE #}
# Terraform Variable Usage

Module variables that need to either be defined or re-defined with a non-default value can easily be hardcoded inline directly within the module call block or from within the root project that is consuming the module. If using the second approach then the root project must have it's own custom variables defined within the projects `variables.tf` file with set default values or with the values provided from a separate environmental `terraform.tfvar` file. Examples of both approaches can be found below. Note that for the standards used within this documentation, all variables will mostly use the first approach for ease of readability.

<br>

> :atom: &nbsp;[__Tip:__](Tip) <br> There is also a third way to provide variable values using Terraform data sources. A data source is a unique type of code block used within a project that either instantiates or collects data that can be referenced throughout the project. A data source, for example,  can be declared to read the terraform state file and gather all of the available information from a previously deployed project stack. Any of the data contained within the data source can then be referenced to set the value of a project or module variable.

<br><br>

{# INLINE VAR DECLARATION #}
## Inline Variable Declaration

```terraform
module "{{ ExModuleName }}" {
    source = "git@github.com:{{ ExModuleRepoURL }}?ref={{ ExModuleVersion }}"

    // Required Variables
    {% for var in var.TFRequiredVars %}
    {% if var.Type != 'map' %}
    {{ var.Name }}{{ "="|indent(var.TFRequiredVars_MaxLength - var.Name|length + 1, True) }} {{ "var.ExampleValue"|e if var.Type == 'String' else var.ExampleValue }}
    {% endif %}
    {% endfor %}
}
```

<br><br>

{# FILE VAR DECLARATION #}
## TFVar Variable Declaration

<br>

### :file_folder: variables.tf

```terraform
{% for var in var.TFRequiredVars %}
{% if var.Type != 'map' %}
variable "{{ var.Name }}" {
    type        = {{ var.Type }}
    description = "{{ var.Description }}"
{% endif %}
{% endfor %}
}
```

<br>

### :file_folder: terraform.tfvars

```terraform
{% for var in var.TFRequiredVars %}
{% if var.Type != 'map' %}
{{ var.Name }}{{ "="|indent(var.TFRequiredVars_MaxLength - var.Name|length + 1, True) }} {{ "var.ExampleValue"|e if var.Type == 'String' else var.ExampleValue }}
{% endif %}
{% endfor %}
```

<br>

### :file_folder: main.tf

```terraform
module "{{ ExModuleName }}" {
    source = "git@github.com:{{ ExModuleRepoURL }}?ref={{ ExModuleVersion }}"

    // Required Variables
    {% for var in var.TFRequiredVars %}
    {% if var.Type != 'map' %}
    {{ var.Name }}{{ "="|indent(var.TFRequiredVars_MaxLength - var.Name|length + 1, True) }} var.{{ var.Name }}
    {% endif %}
    {% endfor %}
}
```

<br><br>

{# FILE VAR DECLARATION #}
# Required Variables

The following required module variables do not contain default values and must be set by the consumer of the module to use the module successfully.

<br><br>

{% for var in var.TFRequiredVars %}
## :warning: {{ var.Name }}
{# Insert Required Variable Image if Provided #}
{% if var.Config.Readme.Variables.Required.Image is defined %}

<br>

![Required]({{ var.Config.Readme.Variables.Required.Image }})
{% endif %}

<br>
{# Insert Variable General Description or Terraform Description Value #}
{% if var.GeneralDetails.Description is defined %}

{{ var.GeneralDetails.Description }}
{% else %}

{{ var.Description }}
{% endif %}
{# Insert Variable General Notes if defined #}
{% if var.GeneralDetails.Note is defined %}

<br>

:spiral_notepad: &nbsp;[__Note:__](Note) <br> {{ var.GeneralDetails.Note }}

{% endif %}
{# Insert Variable General Image if defined #}
{% if var.GeneralDetails.Image is defined %}

<br>

![{{ var.Name }}]({{ var.GeneralDetails.Image }})

{% endif %}
{# End Variable General Section #}

<br><br>

{# Declare Variable Example #}
### :file_folder: Declaration of {{ var.Name }} within the nodules variables.tf file

```terraform
variable "{{ var.Name }}" {
  type        = {{ var.Type }}
  description = "{{ var.Description }}"
}
```
{# Insert Declare Variable Example Description if provided #}
{% if var.VarDetails.Description is defined %}

<br>

{{ var.VarDetails.Description }}
{% endif %}
{# Insert Declare Variable Example Note if provided #}
{% if var.VarDetails.Note is defined %}

<br>

:spiral_notepad: &nbsp;[__Note:__](Note) <br> {{ var.VarDetails.Note }}
{% endif %}
{# Insert Declare Variable Example Image if provided #}
{% if var.VarDetails.Image is defined %}

<br>

![Declaring {{ var.Name }}]({{ var.VarDetails.Image }})
{% endif %}

<br><br>

### :file_folder: Setting the {{ var.Name }} module variable within a projects root main.tf file

```terraform
module "{{ ExModuleName }}" {
    source = "git@github.com:{{ ExModuleRepoURL }}?ref={{ ExModuleVersion }}"

    // Required Variables
    {{ var.Name }}{{ "="|indent(var.TFRequiredVars_MaxLength - var.Name|length + 1, True) }} {{ "var.ExampleValue"|e if var.Type == 'String' else var.ExampleValue }}
}
```
{# Insert Usage Example Description if provided #}
{% if var.UsageDetails.Description is defined %}

<br>

{{ var.UsageDetails.Description }}
{% endif %}
{# Insert Usage Example Note if provided #}
{% if var.UsageDetails.Note is defined %}

<br>

:spiral_notepad: &nbsp;[__Note:__](Note) <br> {{ var.UsageDetails.Note }}
{% endif %}
{# Insert Usage Example Image if provided #}
{% if var.UsageDetails.Image is defined %}

<br>

![Declaring {{ var.Name }}]({{ var.UsageDetails.Image }})
{% endif %}

<br><br><br>
{% endfor %}

# Optional Variables

The following optional module variables are not required because they already have default values assigned when the variables where defined within the modules `variables.tf` file. If the default values do not need to be changed by the root project consuming the module, then they do not even need to be included in the root project. If any of the variables do need to be changed, then they can be added to the root project in the same way that the required variables were defined and utilized. Optional variables also may alter how the module provisions resources in the cases of encryption or IAM policy generation. A variable could flag an encryption requirement when provisioning an S3 bucket or Dynamo table by providing a KMS CMK, for example. Another use case may be the passage of ARN values to allow users or roles access to services or resources, whereas by default permissions would be more restrictive or only assigned to the account root or a single IAM role. A detailed explanation of each of this modules optional variables can be found below:

<br><br>

{% for item in var.TFOptionalVars %}
## :large_blue_circle: {{ item.Name }}

<br>

![Optional](images/neon_optional.png)

<br>

{{ item.Description }}

<br><br>

### Declaration in module variables.tf

```terraform
variable "{{ item.Name }}" {
  type        = {{ item.Type }}
  description = {{ item.Description }}
  default     = {{ item.DefaultValue }}
}
```

<br><br>

### Module usage in project root main.tf <<<<<<<<<<NOT COMPLETED>>>>>>>>>>>>>>>>

```terraform
module "{{ ExModuleName }}" {
  source = "git@github.com:{{ ExModuleRepoURL }}?ref={{ ExModuleVersion }}"

  // Required Variables
  kms_key_alias_name        = "prod/s3"
}
```

<br><br><br>
{% endfor %}
