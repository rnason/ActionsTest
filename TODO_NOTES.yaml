Documentation:
  - Create Provisioned Project Resource List
  - Terraform Plan Example
  - Related Resources such as Key or Bucket Policies Produced
  - Make Notes and Images List Items to cycle through in the event more then 1 is required.
  - Make Notes have 1 extra property, all the the author to choose between the standard Note, Info, Tip, and Warning.
  - Allow the Icon for Note types etc to be set by user.

CLI:
  - Refactor Code into CLI Tool
  - Arguments:
    - ConfigFile
    - Github Token
  - Commands:
    - Generate Documentation
    - Generate Variable List
    - Generate TFVars File (pass tfvar file name and automatically add it to the environments directory)
    - Generate Usable Example
    - Generate Project ConfigFile
    - Generate ChangeLog File (Maybe grab directly from Github)
    - Generate .gitignore
    - Generate New Module (Run in empty directory and it will create common file such as variables.tf, main.tf, outputs.tf, etc..)
    - Generate Outputs (Can we call or easily find and scrape a terraform page with some beautify soup?)
      - Yes, Terraform appears to have a standard https://www.terraform.io/docs/providers/aws/r/s3_bucket.html where the resource would be aws_s3_bucket so just remove aws_ from each of the resources and put in URL path.
    - Generate Github Action for the project.
    - Generate CloudFormation Template to instantiate Secure Bucket, IAM Role, DynamoTable etc..
  - NiceHaves:
    - Securely Store Token (So it doesn't have to be provided on each run)
    - Allow User to supply their own Jinja Template, Document all collected data and available variables that can be used within the template.

Completed:
  - Generate Table of Contents (1/31)
  - Generate Outputs (1/31)
  - Generate Output Examples (1/31)
  - Generate TFVars (1/31)